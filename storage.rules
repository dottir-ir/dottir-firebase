rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isVerifiedDoctor() {
      return isAuthenticated() && 
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.isVerified == true &&
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'doctor';
    }
    
    function isAuthor(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Case images
    match /cases/{imageId} {
      allow read: if isAuthenticated();
      allow create: if isVerifiedDoctor() && 
        request.resource.size < 5 * 1024 * 1024 && // 5MB
        request.resource.contentType.matches('image/.*');
      allow delete: if isAdmin() || isVerifiedDoctor();
    }

    // Verification documents
    match /verification/{userId}/{documentId} {
      allow read: if isAdmin() || isAuthor(userId);
      allow create: if isAuthenticated() && isAuthor(userId) &&
        request.resource.size < 10 * 1024 * 1024 && // 10MB
        request.resource.contentType.matches('application/pdf|image/.*');
      allow delete: if isAdmin() || isAuthor(userId);
    }
  }
} 